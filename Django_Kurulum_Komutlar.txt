Kontroller ve Komutlar : 

1.	python --version   >> python sürümünü kurulumunu kontrol için  


2.	pip list >>   kurulu paketleri gösterir(pip python a ait paket yönetim sistemi)   


3.	python -m pip install Django >> django yüklü değilse yükleyelim  


pip upgrade :

python -m pip install --upgrade pip


4.	pip install virtualenv  >>  VirtualEnv, projelerinizde gerekli olan paketleri sistemden bağımsız bir şekilde kurup, kullanmanızı sağlayacak sanal ortam sağlayan bir yapıdır.

***** Buraya kadar olan kisim pc de sadece 1 kez kurmak icin. Bundan sonrakiler projeler icin

5.	python -m venv env  


6.	env/Scripts/activate >> scriptleri active eder. (Bu komut yerine tek tek cd ile iclerine girip en sonunda activate komutu da calistirilabilir)

7. pip install django >> proje/app  dosyası içinde tekrar kuralım çünkü sanal ortamdayız. 
(Simdi pip list yada pip freeze yaptigimizda, izole edilmis alanimiz icinde yüklü olan paketleri gösterir. ama mesela yeni bir powershell acip burada pip list dersek bir cok paket gösterir. Cünkü burada env icinde degiliz. komple pc miz icindeyiz)


7.	python -m django startproject projeadı  

	django-admin startproject projeadı 

olarak da kullanilabilir.


8.	yukaridaki komut ile proje ismimiz adinda bir klasör olusur. Bunun içerisinde aynı isimde bir klasör daha oluşacak. Ona proje klasörü denir. ve birde manage.py dosyasi olusur. Bu durumu engellemek icin kodun sonuna . konulur


9.	proje genel bir klasör. Proje içerisine uygulamalar oluşturacağız.


10.	cd ile projenin içine girin.


11.	Uygulamanızı oluşturmak için Manage.py ile 
aynı dizinde olduğunuzdan emin olun ve şu komutu yazın:


12.	python manage.py startapp appadi   (app adinda büyük harf olmayacak)


13.	İstediğimiz kadar uygulama(app) oluşturabiliriz istersek bir tane üzerinden de projeyi götürebiliriz.


14.	Uygulamayı projenizde dikkate almak için, 
settings.py'de aşağıdaki gibi INSTALLED_APPS listesinde 
proje adınızı belirtmeniz gerekir:


INSTALLED_APPS = [
   'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # myapps
    'appadı' 	]


15.	py manage.py runserver	 (projeyi çalıştırır terminalde çıkan http ye git) (eger calismaz ise python manage.py runserver)


16.	ctrl + c  >> uygulamayı durdurur


17.	proje altında urls.py dosyasına gelelim. Url ekleme projeye gelen istekleri karşılar. Uygulama(app) dosyasında yeni bir urls.py dosyası oluşturalım.


18.	app içindeki urls içine :
from django.urls import path
from. import views

urlpatterns=[path("", views.home)]


19.	app içinde templates klasörü oluşturalım. isim opsiyonel değil. içerisinde index.html oluşturalım. içerisine  <h1>Hello World</h1> yazalım. (Burada normal ! enter diyerek normal html sayfa template i de olusturabilirz. ve bunun icine h1 yazilabilir.)


20.	yine app içindeki views.py içine gelelim:
from django.shortcuts import render
def home(request):   
return render(request, "index.html")


21.	Bunlar ne demek : urls.py içerisinde belirttiğimiz url sonucunda ilgili home metoduna ulaşacağız. views içerisindeki home index.html i return edecek. index.html i views dosyası aynı uygulama altındaki templates klasöründe arar ve getirir.


22.	app in çalışması için proje dosyası içindeki urls e tanıtılması gerek. Son hali:
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path("", include("first.urls"))]


23.	yeni bir path eklerken slash ın sonda olduğuna dikkat!  >> path('about/', include("first.urls"))




25.	projeyi tekrar çalıştıralım :
py manage.py runserver 


26.   requirements.txt  (Bizim projemizi baska birisi kullanmak istediginde bunun icindeki package lari  yükler. React daki package.json ile ayni maksat)

	pip freeze > requirements.txt
				
				Happy End :)

 MVT açılımı :
Model : Veri tabanıyla olan ilşki
View   : Mantıksal işlevler
Template :  Görünüme yönelik işlevler


{% tag %} --> tag
{{ variable }} --> variable
{{ variable|filter }} ---> filter


Migration :
Önemli:  Eger yazdigimiz kodlar db de bir degisiklik yapacak ise o zaman bu komutlar calistirilir. Ama sadece frontend de degisiklik yapacaksa mesela model deki meta verisi yazma gibi;  bu durumda gerek yok
# db_table = "Student_Table"
# Bu tablo db de tablo adi degistirir.

python manage.py makemigrations
(Bu kod bazen calismadiginda sonuna store yaziyor.)

python manage.py migrate

(Bu komutlar ilk table olusumunda ve tabloya her bir column ekleniisinde yapilir.)
(Eger terminalde bizde select secim yapma istenirse, 1 i seciyoruz ve sonra timezone.now diyoruz)

(Tabledan row sildigimizde de ayni komutlari yaziyoruz. silmis olmamiza ragmen dosyalar kisminda remove adinda yeni bir dosya olusturur.)


	////////// Admin site:

urls dosyasinda otomatik olarak admin path i gelir.
Biz browser a 8000/admin/  yazdigimizda bize direkt olarak arayüz acilir.
Ama bunu kullanabilmek icin önce terminal de createsuperuser yazilir

python manage.py createsuperuser
(Önemli Not: Bu komut calismasi icin manage.py ile ayni seviyede olmamiz gerekir. ve eger hic migrate komutu calistirmadi isek bu komut calismaz. Öyle bir durumda sadece python manage.py migrate komutu yeterlidir.)

Admin interface de islem degisiklik yapabilmek icin app icindeki admin.py kullanilir. Su komutlar yazilir:

from .models import model_adi

admin.site.register(model_adi)


(Ikinci bir model eklemek icin, models da ekleme yapilir. admin.py da da yine ekleme yapilir. daha sonra migrate komutlari calistirilir. )


#### Olusturdugumuz tüm veriler db de olusmaktadir. Bu nedenle görmek istersek sqlite da görebilirz. Sqlite da projemizin genel klasörü secilir ve daha sonra sqlite kismi secilir.
Database e giden veriler admin interface kullanarak girdigimiz veriler vasitasi ile olur



linkler : 
sql için : https://www.yazilimkodlama.com/sql-server-2/sql-komutlari/

django Sadık Turan : https://www.youtube.com/watch?v=hbx39adciac&t=2s
arin yazılım : https://www.youtube.com/playlist?list=PL-Hkw4CrSVq_JXtwz77IxExR3QEbd_b4K








powershell icin komut 
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted



Note: manage.py icinde hangi komutlarin oldugunu görmek icin,  
bu dosya ile ayni seviyed iken  ./manage.py yazilir.


Meta:  tamamen optionaldir ve oop deki innerclass a tekabül eder.

ordering parametresi neye göre siralama yapacagini belirler.
verbose ise frontend de yani admin panel de hangi isim ile yayinlayacagini belirler.
Documentaion da meta option larinda bulunur.









	--- Common Field Types:

    about = models.TextField(null = True, blank=True)
    
	avatar = models.ImageField(null = True, blank = True, upload_to = "media/")


-- imageField da, upload lookup i yapilir. Kullanici bir resim eklediginde, media ismi verilen uzantida resimler kayit edilir.

-- ama foto üzerine admin panel de tikladigimizda acilmaz. Bunun icin setings de bazi ayarlar yapariz.

-- Projenin settings.py da,  

	MEDIA_URL = "/media/  yazilir

-- Projenin urls.py da:

	from django.conf import settings
	from django.conf.urls.static import static

	ve urlpatterns bittikten sonra en alta da su komut yazilir.

	urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

(Bu ayarlarin hepsi image lari browser da görüntülemek icin. Image yüklemede zaten bir problem yasamiyoruz.)

	-- Resim ve video gibi static file lar db de depolanmaz. db de bunlarin sadece adresleri depolanir. kendileri ise cloud gibi yerlerde depolanir.


--- Image secilmemis kisiler icin models dosyasinda default ile image atanabilir.









	Date:

    register_date = models.DateTimeField(auto_now_add=True)
    # datetimefield da saat de gelir. Sadece dateNow da ise tarih gelir.
    # ve burada sadece kayit tarihleri  alinir ve o tarih sabit kalir.

    update_date = models.DateTimeField(auto_now=True)
    # sadece auto_now oldugunda ise; kullanici her degisiklik yaptiginda tarih update edilir.


	Tüm bu degisikliklerden sonra db icin migrate komutlari calistirilir.




Önemli Not:   Degisiklikler yapildiktan sonra db ye gönderirken migrate ile;  bizim karsimiza bir soru cikartir ve 1 veya 2 yi secmemizi söyler. Eger 1 i secersek tüm verilerimiz icin default bir deger kendisi atar.
Ama 2 yi secersek models dosyasindaki class icinde sözkonusu row a default degeri kendimiz atamamiz gerekir. Eger o row da blank = True dersek bu durumda bize böyle bir soru sormaz.













	---- choices:


    YEAR_IN_SCHOOL_CHOICES = [
        ("FR", 'Freshman'),
        ("SP", 'Sophomore'),
        ("JR", 'Junior'),
        ("SR", 'Senior'),
        ("GRD", 'Graduate'),
    ]
    ## Buradaki veriler tuple formatinda. Admin panel de choices yaparken, Buradaki tuple in ikinci elemanlar karsimiza cikarilir.  Ama biz secim yaptiktan sonra, db ye ilk eleman olan kisa halleri yazilir.



    year_in_school = models.CharField(max_length=3, choices=YEAR_IN_SCHOOL_CHOICES, default= "FR")
    ## CharField da max-length girmek zorundayiz. O nedenle ve choice da db ye kaydedilecek verilerimiz en cok 3 karakter oldugundan 3 yazdik.














































